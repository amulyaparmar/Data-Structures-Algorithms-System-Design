1. N
2. N^2
3. N^2
4. ab (iter'ing over 2 diff input arr's)            
5. ab
6. N
7. all but last. O(N + M) is O(N) since we don't know M 
8. a = len of arr, s = len of a str                     (X)
    a * s(loga + logs)sorting within each string. then sorting all the strings (not nlogn + nlogn)
    each comparison w/in arr takes longer.
    comparisons w/in str need to be done for each str
9. N - adding all vals of BST
10. sqrt(N) - uses a for(i = 0; i^2 < n; i++)          
11. N
12. n! factorial
13. 2^n
14. calc'ing 1st n fib nums -> O(2^n) since 2^n + 2^(n-1) + 2^(n-2) etc. (X)
15. O(n)
16. logn

VI  1. O(b)
    2. O(b)
    3. O(1)
    4. a/b = O(1)
    5. logn
    6. sqrt n
    7. n BST (not bal)
    8. n (not BST)
    9. N^2
    10. logn
    11. c is len of str, k is num of letters in alphab -> c*k^c (X)
    12. nlogn + n(logn)

    string runtime is very weird..
    concating a word at a time to a list -> O(n^2)

Arrays and Strings
constant access time
hard to insert and del

Hash Table
    hash code points to an index. a linked list is stored at that idx
ArrayList
    doubles in size to accomodate -> amortized

1.1 
def isUnique(str):
    two pointers to make sure each char has no match

    solution: ask if ASCII or Unicode str
        array where arr[i] = True / False if letter is present
1.2
def isPermutation
    permutation method
    OR
    backtracking recurs func to find all permutations?

    solution: better to SORT or use hash of counts like anagrams
1.3 URLify
    split, join?

    common to manip str from end so there is buffer and dont need to worry about overwriting
1.4 Permutation of Palindrome
    create an arr of chars
    take out all spaces
    make sure theres even num of each char, but one can be odd

1.5 One Away
    ruby - use hash to track quants of chars
    iter thru keys to make sure they differ by only 1

    soln: long...
        2nd arg is larger in oneEditInsert
        doesnt let pointers be offset by more than 1
1.6 String Compression
    two pointers
1.7 Rotate Image
    transpose?

    solution: iter through "layers". iter thru row and col idxs, swapping top with right, right with bot, bot with left, left with top
1.8
    matrix 0's

    solution: still need to set 1st cell in row and col to 0 before modifying entire row/col
        otherw u mess up your iteration
        marking the 1st cells doesnt matter b/c you wouldve already iterated past the 1st in row + col
1.9
    .rotate

    solution: str1 + str1 accounts for xyxy partitions
        so just check if that inc. str2

Linked List
    linear access time
    constant insert/delete at head
    Deleting a node
    Runner techniq

2.1 Remove Dups
    two pointers
2.2 Return Kth to Last El
    two offset pointers
2.3 Delete Middle Node

    solution: transfer date to curr node then delete next node (X)
2.4 Partition
    create 2 sep lists then join them
2.5 Sum Lists 
    did.
    carryOver = bool
2.6
    2 pointers starting at middle
2.7 
    did.
    fast and slow pointer
2.8 Loop Detection <-- (X)

    solution: fast (2x) and slow pointer. when they collide, move slow pointer back to head.
        then move BOTH at a rate of 1 until they collide

3. Stacks and Queues
    3.1 Three stacks in One Arr
        1 arr, keep track of idxs
    3.2 Access Min in O(1)
        create a prop on stack with arr of mins 
    3.3 Stack of Plates
        draw from other if empty
        add to other if full
    3.4 Queue using Stacks
        slinky
    3.5 Sort stack 
        2 stacks and a temp var
    3.6 Animal Shelter. can choose 
        enqueue
        dequeueAny
        dequeueDog
        dequeueCat
        
        use a temp to create a slinky so ppl can choose animal type


4. Trees and Graphs
    should confirm if tree has 0 nodes, where = values go in BST?
    complete, full, perfect

    4.1 Route Between Nodes
        DFS (visited set, add, unshift neighbors that !has)

        or BFS
    4.2 Minimal Tree
        find medians recursively
    4.3 List of Depths
        BFS 2d arr
    4.4 isBalanced
        getHeight and isBalanced
    4.5 validateBST
        recurs check comparisons
        left need to carry max up root knows its min
        right              min                  max
    4.6 Successor
        attempt to find child (8 -> 9) --> make a right 1x then keep going left while u can
            smallest bigger thing
        if u can not, then find parent       --> (up twice??)no. keep going up until u can make a right

        both cases look like hockey sticks 

        8
      /   \
    6       10
  /  \     /  \
 3    7   9    11
  \      /       \
   4    8.5       13
    \
     5              

   4.7 Build Order
        topo sort
        change shape of dependencies
        iter thru classes until u dont take on a full iter
        finished Set

   4.8 1st Common Ancestor
        walk up 1 node at a time, checking if ==
    4.9 BST Sequences
        append the results of:
        Pre-LeftFirst-Order and
        Pre-RightFirst-Order

        solution: weave
    4.10 Check if Subtree
        DFS with isSubtree(root.left) || isSubtree(root.right)

        solution: use preorder representations of each tree
            see if smaller one is a substring
    4.11 Random Node
        BFS to gather all nodes, then .random()
    4.12 Paths with Sum
        need to get all subpaths..
        can get all routes via backtracking then filter out ones with valid windowed subarrays?

        solution: DFS with a DFS on each recurse call (for each node)



5. Bit Manipulation
    Negative numbers
        invert then +1
        1 << i  to create masks
        ~(1 << i) to create mask for clearing
8. Recursion and Dynamic Programming
9. System Design
10. Sorting and Searching
                            time    worst   space
        bubble sort         n^2             1
        selection sort      n^2             1
        merge sort          nlogn           n ** since DFS
        quick sort          nlogn   n^2     logn **
        radix sort          mn  
11. Testing
XI. Advanced Topics
    AVL trees 
        - left and right rotations
        - rotations subjugate parent (becomes child's child)
        - orig parent also takes same-side orig child's child 
    Red / Black trees -
        4 rules: 
            1. root is black
            2. all paths to leaves must have same # of black nodes
            3. red nodes can only have black children
        Inserting:
            the inserted node comes in as a leaf and RED
            if parent is red, then do adjustments:
                N = current, P = parent, U = parent, G = grandparent
                if uncle is RED:
                    flip colors of P, G, and U 
                if uncle is BLACK or NULL:
                    if GPN form triangle:
                        rotate at G
                        then swap original G and P colors
                    if GPN form line:
                        rotate at P
                keep doing adjustments until cond are restored 