TREE - DFS
function depthFirstSearch(root) {
    dfs(root.left)
    dfs(root.right)
}

TREE - BFS

function breadthFirstSearch(root) {
    q = [root]
    while q.length > 0
        .shift()
        if .right .push(.right)
        if .left .push(.left)
}


GRAPH - BFS 

function breadthFirstSearch(startingNode, targetVal) {
    let currNode
    visited = new Set()
    let queue = [startingNode]
    while (queue.length) {
        currNode = queue.shift()
        visited.add(currNode.val)
        if (currNode.val === targetVal) return currNode
        currNode.neighbors.forEach(neighbor => {
            if (!visited.has(neighbor.val)) { queue.push(neighbor) }
        })
    }
    return null

}